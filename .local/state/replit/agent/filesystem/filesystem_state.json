{"file_contents":{"app.py":{"content":"import os\nimport imaplib\nimport email\nimport email.utils\nfrom email.header import decode_header\nfrom datetime import datetime\nimport logging\nfrom flask import Flask, render_template, request, flash, jsonify\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\n\n# Validate required environment variables\nif not app.secret_key:\n    raise ValueError(\"SESSION_SECRET environment variable is required for security\")\n\n# Gmail accounts configuration - moved to environment variables for security\ndef get_accounts():\n    \"\"\"Get Gmail accounts from environment variables for security\"\"\"\n    accounts = {}\n    \n    # Try to get account configurations from environment variables\n    for i in range(1, 6):  # Support up to 5 accounts\n        account_key = f\"GMAIL_ACCOUNT_{i}_KEY\"\n        account_email = f\"GMAIL_ACCOUNT_{i}_EMAIL\"\n        account_password = f\"GMAIL_ACCOUNT_{i}_APP_PASSWORD\"\n        \n        key = os.environ.get(account_key)\n        email = os.environ.get(account_email)\n        app_password = os.environ.get(account_password)\n        \n        if key and email and app_password:\n            accounts[key] = {\n                \"email\": email,\n                \"app_password\": app_password\n            }\n    \n    # Fallback for development if no environment variables are set\n    if not accounts:\n        logging.warning(\"No Gmail accounts configured in environment variables. Using development fallback.\")\n        accounts = {\n            \"demo_account\": {\n                \"email\": \"demo@example.com\",\n                \"app_password\": \"demo_password_please_configure_real_credentials\"\n            }\n        }\n    \n    return accounts\n\n# Get accounts from environment configuration\nACCOUNTS = get_accounts()\n\ndef connect_to_gmail(email_addr, password):\n    \"\"\"Connect to Gmail using IMAP with enhanced error handling and validation\"\"\"\n    if not email_addr or not password:\n        logging.error(\"Email address and password are required\")\n        return None\n    \n    # Basic email validation\n    if '@' not in email_addr or '.' not in email_addr:\n        logging.error(f\"Invalid email address format: {email_addr}\")\n        return None\n        \n    try:\n        mail = imaplib.IMAP4_SSL('imap.gmail.com', 993)\n        mail.login(email_addr, password)\n        logging.info(f\"Successfully connected to Gmail account: {email_addr}\")\n        return mail\n    except imaplib.IMAP4.error as e:\n        logging.error(f\"IMAP authentication failed for {email_addr}: {e}\")\n        return None\n    except Exception as e:\n        logging.error(f\"Unexpected error connecting to Gmail {email_addr}: {e}\")\n        return None\n\ndef decode_mime_words(s):\n    \"\"\"Decode MIME encoded words\"\"\"\n    if s is None:\n        return ''\n    \n    decoded_parts = []\n    for part, encoding in decode_header(s):\n        if isinstance(part, bytes):\n            if encoding:\n                try:\n                    decoded_parts.append(part.decode(encoding))\n                except:\n                    decoded_parts.append(part.decode('utf-8', errors='ignore'))\n            else:\n                decoded_parts.append(part.decode('utf-8', errors='ignore'))\n        else:\n            decoded_parts.append(str(part))\n    \n    return ''.join(decoded_parts)\n\ndef get_emails_from_folder(mail, folder, folder_name, limit=20):\n    \"\"\"Get only the most recent emails from a specific folder - optimized for speed\"\"\"\n    emails = []\n    \n    try:\n        # Select the folder\n        result = mail.select(folder)\n        if result[0] != 'OK':\n            return emails\n        \n        # Search for all emails using UID for better performance\n        result, data = mail.uid('search', None, 'ALL')\n        if result != 'OK':\n            return emails\n        \n        # Get UIDs and take only the most recent ones\n        email_uids = data[0].split()\n        if not email_uids:\n            return emails\n        \n        # Take only the last 'limit' emails for speed\n        recent_uids = email_uids[-limit:]\n        recent_uids.reverse()  # Most recent first\n        \n        # Fetch only headers for better performance\n        for uid in recent_uids:\n            try:\n                # Fetch only the essential headers WITHOUT marking as read - using BODY.PEEK\n                result, msg_data = mail.uid('fetch', uid, '(BODY.PEEK[HEADER.FIELDS (FROM SUBJECT DATE)])')\n                \n                if result == 'OK' and msg_data[0]:\n                    # Parse email header\n                    msg = email.message_from_bytes(msg_data[0][1])\n                    \n                    # Extract sender information using email.utils for better parsing\n                    from_header = msg.get('From', '')\n                    from_name, from_email = email.utils.parseaddr(from_header)\n                    from_name = decode_mime_words(from_name) if from_name else from_email\n                    \n                    # Extract subject\n                    subject = decode_mime_words(msg.get('Subject', 'No Subject'))\n                    \n                    # Extract and parse date\n                    date_header = msg.get('Date', '')\n                    try:\n                        date_obj = email.utils.parsedate_to_datetime(date_header)\n                        date_timestamp = date_obj.timestamp()\n                        date_formatted = date_obj.strftime('%b %d, %Y %I:%M %p')\n                    except:\n                        date_timestamp = datetime.now().timestamp()\n                        date_formatted = 'Unknown'\n                    \n                    emails.append({\n                        'folder': folder_name,\n                        'from_email': from_email,\n                        'from_name': from_name,\n                        'subject': subject,\n                        'title': subject,\n                        'date': date_timestamp,\n                        'date_formatted': date_formatted\n                    })\n                    \n            except Exception as e:\n                logging.error(f\"Error processing email UID {uid}: {e}\")\n                continue\n                \n    except Exception as e:\n        logging.error(f\"Error accessing folder {folder}: {e}\")\n    \n    return emails\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    selected_account = ''\n    emails = []\n    error = ''\n    email_limit = 10\n    search_sender = ''\n    search_subject = ''\n    \n    if request.method == 'POST':\n        # Input validation and sanitization\n        selected_account = request.form.get('account', '').strip()\n        try:\n            email_limit = int(request.form.get('email_limit', 10))\n            # Limit email_limit to reasonable bounds\n            email_limit = max(1, min(email_limit, 50))\n        except (ValueError, TypeError):\n            email_limit = 10\n            \n        search_sender = request.form.get('search_sender', '').strip()[:100]  # Limit length\n        search_subject = request.form.get('search_subject', '').strip()[:200]  # Limit length\n        \n        if selected_account and selected_account in ACCOUNTS:\n            account_data = ACCOUNTS[selected_account]\n            \n            # Connect to Gmail\n            mail = connect_to_gmail(account_data['email'], account_data['app_password'])\n            \n            if mail:\n                try:\n                    # Get only the most recent emails from each folder - optimized for speed\n                    fetch_limit = min(email_limit + 5, 20)  # Never fetch more than 20 total\n                    \n                    # Get emails from Inbox\n                    inbox_emails = get_emails_from_folder(mail, 'INBOX', 'Inbox', fetch_limit)\n                    \n                    # Get emails from Spam\n                    spam_emails = get_emails_from_folder(mail, '[Gmail]/Spam', 'Spam', fetch_limit)\n                    \n                    # Combine and sort emails by date (most recent first)\n                    emails = inbox_emails + spam_emails\n                    emails.sort(key=lambda x: x['date'], reverse=True)\n                    \n                    # Limit to requested number of emails (search will be done client-side)\n                    emails = emails[:email_limit]\n                    \n                    # Close connection\n                    mail.close()\n                    mail.logout()\n                    \n                except Exception as e:\n                    error = f'Error retrieving emails: {str(e)}'\n                    logging.error(f\"Error retrieving emails: {e}\")\n                    try:\n                        mail.close()\n                        mail.logout()\n                    except:\n                        pass\n            else:\n                error = f'Failed to connect to Gmail account: {account_data[\"email\"]}. Please check your App Password.'\n    \n    return render_template('index.html', \n                         accounts=ACCOUNTS,\n                         selected_account=selected_account,\n                         emails=emails,\n                         error=error,\n                         email_limit=email_limit,\n                         search_sender=search_sender,\n                         search_subject=search_subject)\n\n@app.route('/fetch_emails', methods=['POST'])\ndef fetch_emails():\n    \"\"\"API endpoint to fetch emails without page refresh with enhanced validation\"\"\"\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({'error': 'No data provided', 'emails': []})\n            \n        # Input validation and sanitization\n        selected_account = str(data.get('account', '')).strip()\n        try:\n            email_limit = int(data.get('email_limit', 10))\n            # Enforce reasonable bounds\n            email_limit = max(1, min(email_limit, 50))\n        except (ValueError, TypeError):\n            email_limit = 10\n            \n        search_sender = str(data.get('search_sender', ''))[:100]  # Limit length\n        search_subject = str(data.get('search_subject', ''))[:200]  # Limit length\n        \n        if not selected_account or selected_account not in ACCOUNTS:\n            return jsonify({'error': 'Invalid account selected', 'emails': []})\n        \n        account_data = ACCOUNTS[selected_account]\n        \n        # Connect to Gmail\n        mail = connect_to_gmail(account_data['email'], account_data['app_password'])\n        \n        if not mail:\n            return jsonify({\n                'error': f'Failed to connect to Gmail account: {account_data[\"email\"]}. Please check your App Password.',\n                'emails': []\n            })\n        \n        try:\n            # Get only the most recent emails from each folder - optimized for speed\n            # We fetch more than limit to ensure we have enough after combining and sorting\n            fetch_limit = min(email_limit + 5, 20)  # Never fetch more than 20 total\n            \n            # Get emails from Inbox\n            inbox_emails = get_emails_from_folder(mail, 'INBOX', 'Inbox', fetch_limit)\n            \n            # Get emails from Spam\n            spam_emails = get_emails_from_folder(mail, '[Gmail]/Spam', 'Spam', fetch_limit)\n            \n            # Combine and sort emails by date (most recent first)\n            emails = inbox_emails + spam_emails\n            emails.sort(key=lambda x: x['date'], reverse=True)\n            \n            # Limit to requested number of emails (no server-side search filtering)\n            emails = emails[:email_limit]\n            \n            # Close connection\n            mail.close()\n            mail.logout()\n            \n            return jsonify({\n                'error': '',\n                'emails': emails,\n                'email_count': len(emails),\n                'email_limit': email_limit,\n                'search_sender': search_sender,\n                'search_subject': search_subject\n            })\n            \n        except Exception as e:\n            error_msg = f'Error retrieving emails: {str(e)}'\n            logging.error(f\"Error retrieving emails: {e}\")\n            try:\n                mail.close()\n                mail.logout()\n            except:\n                pass\n            return jsonify({'error': error_msg, 'emails': []})\n            \n    except Exception as e:\n        logging.error(f\"Error in fetch_emails endpoint: {e}\")\n        return jsonify({'error': f'Server error: {str(e)}', 'emails': []})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":12546},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n]\n","size_bytes":280},"replit.md":{"content":"# Overview\n\nTSS Gmail Access is a Flask-based web application that provides secure access to multiple Gmail accounts through IMAP connections. The application allows users to select from predefined Gmail accounts and view their email data through a clean, responsive web interface. It's designed for managing multiple Gmail accounts from a single dashboard with a focus on simplicity and security.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Web Framework Architecture\nThe application uses Flask as the core web framework with a simple MVC pattern:\n- **app.py**: Main application logic containing IMAP connection handling and email processing\n- **main.py**: Application entry point with development server configuration\n- **templates/index.html**: Single-page interface using Jinja2 templating\n\n## Frontend Design\n- **Responsive Design**: Built with Tailwind CSS for mobile-first responsive layout\n- **Interactive Elements**: Custom CSS animations and hover effects for enhanced user experience\n- **Icon Integration**: Font Awesome icons for visual consistency\n- **Form Handling**: JavaScript-enhanced form submission for account selection\n\n## Email Processing Architecture\n- **Optimized IMAP Integration**: Direct connection to Gmail's IMAP servers using Python's imaplib with UID-based fetching\n- **Performance Optimization**: Fetches only email headers (not full body) and limits to last 20 emails per folder maximum\n- **Client-side Filtering**: Real-time search filtering performed in browser for instant results without server requests\n- **MIME Decoding**: Custom functions for handling various email encodings and character sets\n- **Error Handling**: Comprehensive logging and error management for connection failures\n\n## Security Model\n- **App Passwords**: Uses Gmail App Passwords instead of regular passwords for enhanced security\n- **Environment Variables**: Session secrets configured via environment variables\n- **Hardcoded Credentials**: Currently stores account credentials directly in code (development setup)\n\n## Data Flow\n1. User selects Gmail account from dropdown\n2. Application establishes IMAP connection using stored credentials\n3. Email data is fetched and processed for display\n4. Results are rendered through Flask templates with error handling\n\n# External Dependencies\n\n## Core Dependencies\n- **Flask**: Web framework for routing and templating\n- **imaplib**: Python standard library for IMAP email access\n- **email**: Python standard library for email parsing and MIME handling\n\n## Frontend Dependencies\n- **Tailwind CSS**: Utility-first CSS framework loaded via CDN\n- **Font Awesome**: Icon library for UI elements loaded via CDN\n\n## Email Service Integration\n- **Gmail IMAP**: Direct integration with Gmail's IMAP servers (imap.gmail.com:993)\n- **App Passwords**: Requires Gmail App Password authentication for each account\n\n## Development Environment\n- **Python Logging**: Built-in logging for debugging and error tracking\n- **Flask Development Server**: Hot reloading enabled for development\n\n## Hosting Requirements\n- **Port Configuration**: Configured to run on port 5000 with host binding to 0.0.0.0\n- **Environment Variables**: Supports SESSION_SECRET environment variable for production security","size_bytes":3293},"style.css":{"content":"/* Custom styles for TSS Gmail Access */\n\n/* Enhanced hover effects */\n.email-row {\n    transition: all 0.2s ease-in-out;\n}\n\n.email-row:hover {\n    background-color: #f9fafb;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n/* Custom focus styles for better accessibility */\nselect:focus,\ninput:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n/* Smooth transitions for form elements */\nselect,\ninput {\n    transition: all 0.2s ease-in-out;\n}\n\n/* Custom scrollbar for table */\n.overflow-x-auto::-webkit-scrollbar {\n    height: 6px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-track {\n    background: #f1f5f9;\n    border-radius: 3px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-thumb {\n    background: #cbd5e1;\n    border-radius: 3px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-thumb:hover {\n    background: #94a3b8;\n}\n\n/* Loading animation for form submission */\n.loading {\n    position: relative;\n    overflow: hidden;\n}\n\n.loading::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n    animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n    0% { left: -100%; }\n    100% { left: 100%; }\n}\n\n/* Responsive text truncation */\n@media (max-width: 640px) {\n    .max-w-xs {\n        max-width: 120px;\n    }\n    \n    .max-w-md {\n        max-width: 150px;\n    }\n}\n\n/* Enhanced badge styles */\n.inline-flex.items-center {\n    font-weight: 600;\n    letter-spacing: 0.025em;\n}\n\n/* Table header enhancements */\nthead th {\n    font-weight: 600;\n    letter-spacing: 0.05em;\n}\n\n/* Card shadow enhancements */\n.shadow-md {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.shadow-sm {\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n/* Custom focus ring for better accessibility */\n.focus\\:ring-2:focus {\n    box-shadow: 0 0 0 2px var(--tw-ring-color);\n}\n\n/* Animated icons */\n.fas {\n    transition: transform 0.2s ease-in-out;\n}\n\n.hover\\:transform:hover .fas {\n    transform: scale(1.1);\n}\n\n/* Custom button hover effects */\nbutton:hover,\n.btn:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n}\n\n/* Gradient text effect for title */\n.text-gradient {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n/* Custom alert animations */\n.alert {\n    animation: slideInFromTop 0.3s ease-out;\n}\n\n@keyframes slideInFromTop {\n    0% {\n        transform: translateY(-20px);\n        opacity: 0;\n    }\n    100% {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n/* Enhanced table styling */\ntbody tr {\n    border-bottom: 1px solid #e5e7eb;\n}\n\ntbody tr:last-child {\n    border-bottom: none;\n}\n\n/* Custom tooltip styles */\n[title]:hover::before {\n    content: attr(title);\n    position: absolute;\n    background: #374151;\n    color: white;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 12px;\n    white-space: nowrap;\n    z-index: 1000;\n    transform: translateY(-100%);\n    margin-top: -8px;\n}\n\n/* Loading spinner for async operations */\n.spinner {\n    border: 2px solid #f3f4f6;\n    border-top: 2px solid #3b82f6;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    animation: spin 1s linear infinite;\n    display: inline-block;\n    margin-right: 8px;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Mobile optimizations */\n@media (max-width: 768px) {\n    .container {\n        padding-left: 1rem;\n        padding-right: 1rem;\n    }\n    \n    .text-4xl {\n        font-size: 2rem;\n    }\n    \n    .grid-cols-3 {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Email row specific styling */\n.email-row td {\n    vertical-align: middle;\n}\n\n/* Folder badge styling */\n.inline-flex.items-center.px-2\\.5 {\n    text-transform: uppercase;\n    font-size: 0.75rem;\n    font-weight: 700;\n}\n\n/* Form container styling */\nform {\n    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n    border-radius: 0.5rem;\n    padding: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n/* Select dropdown custom styling */\nselect {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\n    background-position: right 0.5rem center;\n    background-repeat: no-repeat;\n    background-size: 1.5em 1.5em;\n    padding-right: 2.5rem;\n}\n\n/* Header title styling */\nh1 {\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n/* Connection status styling */\n.bg-blue-50 {\n    background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\n}\n\n.bg-red-50 {\n    background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);\n}\n\n/* Table responsive styling */\n@media (max-width: 1024px) {\n    .overflow-x-auto {\n        display: block;\n        white-space: nowrap;\n    }\n    \n    table {\n        font-size: 0.875rem;\n    }\n    \n    th, td {\n        padding: 0.5rem 0.75rem;\n    }\n}\n\n/* Welcome section styling */\n.py-16 {\n    background: radial-gradient(ellipse at center, #f8fafc 0%, #e2e8f0 100%);\n    border-radius: 1rem;\n    margin: 2rem 0;\n}\n\n/* Feature cards styling */\n.grid .bg-white {\n    transition: all 0.3s ease;\n    border: 1px solid #e5e7eb;\n}\n\n.grid .bg-white:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n    border-color: #3b82f6;\n}\n\n/* Icon styling in feature cards */\n.grid .fas {\n    opacity: 0.8;\n}\n\n.grid .bg-white:hover .fas {\n    opacity: 1;\n    transform: scale(1.2);\n}\n\n/* Loading state for form */\n.loading select {\n    opacity: 0.7;\n    pointer-events: none;\n}\n\n/* Enhanced focus states */\nselect:focus-visible,\nbutton:focus-visible {\n    outline: 2px solid #3b82f6;\n    outline-offset: 2px;\n}\n","size_bytes":5995},"static/style.css":{"content":"/* Custom styles for TSS Gmail Access */\n\n/* Enhanced hover effects */\n.email-row {\n    transition: all 0.2s ease-in-out;\n}\n\n.email-row:hover {\n    background-color: #f9fafb;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n/* Custom focus styles for better accessibility */\nselect:focus,\ninput:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n/* Smooth transitions for form elements */\nselect,\ninput {\n    transition: all 0.2s ease-in-out;\n}\n\n/* Custom scrollbar for table */\n.overflow-x-auto::-webkit-scrollbar {\n    height: 6px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-track {\n    background: #f1f5f9;\n    border-radius: 3px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-thumb {\n    background: #cbd5e1;\n    border-radius: 3px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-thumb:hover {\n    background: #94a3b8;\n}\n\n/* Loading animation for form submission */\n.loading {\n    position: relative;\n    overflow: hidden;\n}\n\n.loading::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n    animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n    0% { left: -100%; }\n    100% { left: 100%; }\n}\n\n/* Responsive text truncation */\n@media (max-width: 640px) {\n    .max-w-xs {\n        max-width: 120px;\n    }\n    \n    .max-w-md {\n        max-width: 150px;\n    }\n}\n\n/* Enhanced badge styles */\n.inline-flex.items-center {\n    font-weight: 600;\n    letter-spacing: 0.025em;\n}\n\n/* Table header enhancements */\nthead th {\n    font-weight: 600;\n    letter-spacing: 0.05em;\n}\n\n/* Card shadow enhancements */\n.shadow-md {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.shadow-sm {\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n/* Custom focus ring for better accessibility */\n.focus\\:ring-2:focus {\n    box-shadow: 0 0 0 2px var(--tw-ring-color);\n}\n\n/* Animated icons */\n.fas {\n    transition: transform 0.2s ease-in-out;\n}\n\n.hover\\:transform:hover .fas {\n    transform: scale(1.1);\n}\n\n/* Custom button hover effects */\nbutton:hover,\n.btn:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n}\n\n/* Gradient text effect for title */\n.text-gradient {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n/* Custom alert animations */\n.alert {\n    animation: slideInFromTop 0.3s ease-out;\n}\n\n@keyframes slideInFromTop {\n    0% {\n        transform: translateY(-20px);\n        opacity: 0;\n    }\n    100% {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n/* Enhanced table styling */\ntbody tr {\n    border-bottom: 1px solid #e5e7eb;\n}\n\ntbody tr:last-child {\n    border-bottom: none;\n}\n\n/* Custom tooltip styles */\n[title]:hover::before {\n    content: attr(title);\n    position: absolute;\n    background: #374151;\n    color: white;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 12px;\n    white-space: nowrap;\n    z-index: 1000;\n    transform: translateY(-100%);\n    margin-top: -8px;\n}\n\n/* Loading spinner for async operations */\n.spinner {\n    border: 2px solid #f3f4f6;\n    border-top: 2px solid #3b82f6;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    animation: spin 1s linear infinite;\n    display: inline-block;\n    margin-right: 8px;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Mobile optimizations */\n@media (max-width: 768px) {\n    .container {\n        padding-left: 1rem;\n        padding-right: 1rem;\n    }\n    \n    .text-4xl {\n        font-size: 2rem;\n    }\n    \n    .grid-cols-3 {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Search input styling */\ninput[type=\"text\"] {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236b7280'%3e%3cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'/%3e%3c/svg%3e\");\n    background-position: right 0.75rem center;\n    background-repeat: no-repeat;\n    background-size: 1.25em 1.25em;\n    padding-right: 3rem;\n}\n\n/* Enhanced focus states for inputs */\ninput:focus-visible {\n    outline: 2px solid #3b82f6;\n    outline-offset: 2px;\n}\n\n/* Auto-refresh indicator animation */\n.auto-refresh-indicator {\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.5; }\n}\n\n/* Filter section styling */\n.grid .flex.flex-col input,\n.grid .flex.flex-col select {\n    font-size: 0.9rem;\n}\n\n.grid .flex.flex-col label {\n    font-size: 0.85rem;\n    color: #374151;\n}\n\n/* Enhanced form spacing */\n.space-y-4 > * + * {\n    margin-top: 1rem;\n}\n\n/* Filter active state */\ninput[type=\"text\"]:not(:placeholder-shown) {\n    border-color: #3b82f6;\n    box-shadow: 0 0 0 1px #3b82f6;\n}\n\n/* Email counter styling */\n.text-blue-600 {\n    font-weight: 600;\n}\n\n/* Loading overlay for form */\n.loading {\n    position: relative;\n    pointer-events: none;\n    opacity: 0.7;\n}\n\n.loading::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(255, 255, 255, 0.8);\n    z-index: 10;\n    border-radius: 0.5rem;\n}\n\n.loading::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 2rem;\n    height: 2rem;\n    border: 3px solid #e5e7eb;\n    border-top: 3px solid #3b82f6;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    z-index: 11;\n}\n","size_bytes":5703}}}